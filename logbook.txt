
BASIC CONFIGURATION OF THE YML FILE OF A POSTGRESQL DOCKER CONTAINER:
  https://hub.docker.com/_/postgres => HERE IT IS A BASIC GUIDE TO SETUP A POSTGRESQL YAML FILE

BASIC INTERACTION WITH DOCKER CONTAINER:
  docker-compose up -d [SERVICE_NAME]  ===> TURNS ON A SERVICE OF THE docker-compose.yml file
  docker-compose down [SERVICE_NAME] ===> TURNS OF A SERVICE IN OF THE docker-compose.yml file
  docker-compose ps ===> PRINTS OUT THE CURRENT RUNNING DOCKER'S SERVICES STATUS

HOW TO ACCESS A POSTGRESQL DOCKER CONTAINER IN BASH MODE:
  - docker-compose exec [SERVICE_NAME] bash ===> ENTERS INTO A RUNING DOCKER SERVICE IN BASH MODE, IT CAN BE USED TO ACCES A POSTGRESS CONTAINER
  - psql -h localhost -d [DB_NAME(my_store)] -U user ===> When you're in the container you can acces to a created db using this command
  - \d+  ===> When youre in the db you can see it's schema using this command
  - \q ===> YOU CAN USE THIS COMMAND TO GET OUT OF THE BASH CONSOLE
  - exit ===> YOU CAN USE THIS COMMAND TO GET OUT OF THE DOCKER CONTAINER

CONFIGURE A PGADMIN4 IMAGE TO ACCES A POSTGRESQL DOCKER CONTAINER BY A WEB GRAPHIC UI:
  https://hub.docker.com/r/dpage/pgadmin4
  IF YOU WANT TO CONNECT THE DB INSIDE THE DOCKER CONTAINER WITH PGADMIN4 UI YOU MAY WANT TO KNOWS IT'S IP

  HOW TO KNOW THE IP OF A POSTGRESQL DOCKER CONTAINER:
    YOU CAN:
      - Enter into the container with docker-compose exec [SERVICE_NAME] bash THEN JUST grab the id from the dir location of the basmode
      OR
      - docker ps ===> WILL GIVE YOU MORE INFORMATION ABOUT THE COINTAINERS, THE ONE YOU NEED IT'S THE ID OF THE POSTGRESQL CONTAINER
          ===> docker inspect [CONTAINER_ID(81384ff38429)] ===> PRINTS OUT A LOT OF INFORMATION ABOUT THE GIVEN CONTAINER, YOU MUST LOOK UP FOR THE 'IPAddress' PROP AT THE END.



CONNECTING OUR NODE APP WITH POSGRESQL:

  https://node-postgres.com/ ===> It's the library we're goin to use to connect with postgres
  npm i pg -E



CONFIGURE A SERVICE FOR A MYSQL INSTACE IN DOCKER:
  - The mandatory environment variables are MYSQL_DATABASE MYSQL_ROOT_PASSWORD
  - you may want to change the default 3306 port if you already have a mysql db using this port

  ==> After setting up the basic configuration you must create a new db (my_store) by INTERACTING WITH A MYSQL DOCKER INSTACE

  INTERACTING WITH A MYSQL DOCKER INSTANCE IN BASH MODE:
    - docker-compose exec [SERVICE_NAME(mysql)] bash ===> run this command to access to the docker instance in bash
    - mysql -e "[SQL QUERY]" -p ===> run this to perform an sql query in the sql container, you must provide the password after executing this command
      - https://phoenixnap.com/kb/how-to-list-all-databases-mysql#:~:text=How%20to%20Show%20all%20MySQL%20Databases%20From%20Command%20Line
    - IF IT'S THE FIRST TIME SETTING UP THE DOCKER CONTAINER YOU MAY WANT TO CHECK IF THE DB YOU NEED IT'S CREATED, AND IF IT'S NOT CREATED
        YOU MUST TO CREATED A NEW DB THAT HAS THE SAME NAME THAT YOU SET IN THE YML FILE FOR THE 'mysql' SERVICE.
      - mysql -e "SHOW DATABASES;" -p
      - mysql -e "CREATE DATABASE my_store;" -p


CONFIGURE A MIGRATION SYSTEM WITH SEQUELIZE
  - npm i sequelize-cli -D -E ===> INSTALL THIS NPM PACKAGE TO CREATE A MIGRATION BOILERPLATE
  - create a file named '.sequelizerc' and export from it an object that contains the paths to:
    - configuration file of the migrations
    - models folder of the sequilize orm
    - migrations folder in wich sequelize-cli will persist the generated boilerplates
    - seeders folder

  - [IMPORTANT!] YOU MUST BE CAREFUL AND CHECK THAT THE 'timestamps' PARAM IN YOUR MODEL IS SETTED TO TRUE
    - https://stackoverflow.com/questions/20386402/sequelize-unknown-column-createdat-in-field-list
    - https://stackoverflow.com/questions/20386402/sequelize-unknown-column-createdat-in-field-list#:~:text=define%3A%20%7B%0A%20%20%20%20%20%20%20%20timestamps%3A%20false%0A%20%20%20%20%7D

  - in the 'scripts' section from 'package.json' file write the following scripts:
    - "migrations:generate": "sequelize-cli migration:generate --name" ===> wil generate a boiler plate with a given name
    - "migrations:run": "sequelize-cli db:migrate" ===> will run all the migrations
    - "migrations:revert": "sequelize-cli db:migrate:undo" ===> will perfom the equivalent of a rollback
    - "migrations:clean": "sequelize-cli db:migrate:undo:all" ===> will rollback all the migrations to the initial state


PORSTGRESQL RELATIONS:

    ONE-ONE: If we have the entities A = 'customer' and B = 'user', then:
      - 'A' HasOne -> 'B' ===> The relation will fall on 'B'
      - 'A' BelongsTo -> 'B' ==> The relation will fall on 'A'
